/* eslint-disable class-methods-use-this */
const chalk = require('chalk');
const Vue = require('vue');

let index = 0;
class TransformSFC {
  // constructor(option) { }

  apply(compiler) {
    index = 0;
    // compiler.hooks.normalModuleFactory.tap('TransformSFC', (factory) => {
    //   factory.hooks.parser.for('javascript/auto').tap('MyPlugin', (parser, options) => {
    //     parser.hooks.evaluate.for('ObjectExpression').tap('exportExpression', (expression, declaration) => {
    //     });
    //   });
    // });
    // compiler.hooks.compilation.tap('TransformSFC', (compilation) => {
    //   compilation.hooks.shouldRecord.tap('afterBuildMoudle', (module) => {
    //     if (index >= 0 && index < 1) {
    //       console.log(chalk.green('afterBuildMoudle?????'), module);
    //       index += 1;
    //       return true;
    //     }
    //     index += 1;
    //     return false;
    //   });
    //   compilation.hooks.recordModules.tap('afterBuildMoudle', (module) => {
    //     console.log(chalk.green('afterBuildMoudle'), module);
    //   });
    // });
    compiler.hooks.emit.tapAsync('MyPlugin', (compilation, callback) => {
      // Explore each chunk (build output):
      compilation.chunks.forEach((chunk) => {
        // Explore each module within the chunk (built inputs):
        // chunk.getModules().forEach((module) => {
        //   // Explore each source file path that was included into the module:
        //   module.buildInfo && module.buildInfo.fileDependencies && module.buildInfo.fileDependencies.forEach((filepath) => {
        //     // we've learned a lot about the source structure now...
        //   });
        // });

        // Explore each asset filename generated by the chunk:
        chunk.files.forEach((filename, i) => {
          // Get the asset source for each file generated by the chunk:
          const source = compilation.assets[filename].source();
          if (i >= 0 && i < 1) {
            // const props = /props:{(\S\s*)}/.exec(source);
            // console.log(chalk.green('afterBuildMoudle'), source);
            const js = new Function(`return ${source}`);
            console.log(chalk.green('afterBuildMoudle type'), js);
            const vueConstructor = Vue.extend(js());
          }
        });
      });

      callback();
    });
  }
}

module.exports = TransformSFC;
